asg: https://www.scaler.com/academy/mentee-dashboard/class/53548/assignment/problems/27413?navref=cl_tt_nv

Q1. Specific elements
Problem Statement:

Given two 2D arrays, row and column ranges,

Perform the following operations:

Find the matrix multiplication of the given two matrices and
Extract the elements from the output of above step using the given ranges
If matrix multiplication is not possible, return -1
Note: The end points (upper range) of both rows and columns are excluded.

Input Format:

There will be four lines of input as follows:  
First line will have mat1.  
Second line will have mat2.  
Third line will have two space-separated integers representing start and end point of rows.  
Fourth line will have two space-separated integers representing start and end point of columns.
Output Format:

A Numpy array
Sample Input:

[[6 6 4 7 9]  
 [0 2 2 9 3]  
 [6 0 2 5 2]  
 [2 4 3 5 5]]  
[[8 6 6 8 3]  
 [2 7 0 3 1]  
 [3 2 1 5 2]  
 [7 0 7 6 8]  
 [1 5 6 4 5]]  
1 3  
2 4
Sample Output:

[[83 82]  
 [85 96]]
Sample explanation:

The dimension of product is (5,5), and the elements for rows 1 to 4 and columns 2 to 4 are prd[1][2], prd[1][3], prd[2][2] and prd[2][3] i.e. 83, 82, 85 and 96.

---------------------------------------------------------------------------------------
Q2. Dot Dot Dash
Which of the following code will NOT throw an error?

A.

arr1 = np.array([1,2,3])
arr2 = np.array([9,8,7])
np.dot(arr1, arr2)

B.

arr1 = np.array([[1,2], [3,4]])
arr2 = np.array([[1], [2]])
np.dot(arr1, arr2)

C.

arr1 = np.array([1,2,3])
k = 3
np.dot(arr1, k)

D.

arr1 = np.array([[1,2], [3,4]])
arr2 = np.array([1,1])
np.dot(arr1, arr2)

may have multiple correct answers
---------------------------------------------------------------------------------------
Q3. Vectorized code

Given 3 arrays,

arr1 = np.array([1,2,3,6,3,2]) 
arr2 = np.array([4,2,1,3,3,2]) 
arr3 = np.zeros(len(arr1)) 
Which of the following are vectorized code(s) for array operations?

A.

for i in range(len(arr1)): 
    arr3[i] = arr1[i] * arr2[i] 
B.

arr3 = arr1*arr2 
C.

for i in range(len(arr1)): 
    if(arr1[i] < 0 ): 
        arr1[i] = -1 
    else: 
        arr1[i] = 1
D.

np.where(arr1 > 0, 1, -1)

may have multiple correct answers

---------------------------------------------------------------------------------------
Q4. Inter dimension
Given a 3D array of shape (2, 3, 3)


array([[[ 0, 1, 2],
        [ 3, 4, 5], 
        [ 6, 7, 8]], 

        [[ 9, 10, 11], 
         [12, 13, 14], 
         [15, 16, 17]]])

What will be the output of arr[1, :, :] ?

A.

array([[ 3, 4, 5], 
       [12, 13, 14]])

B.

array([[ 9, 10, 11], 
       [12, 13, 14], 
       [15, 16, 17]])

C.

array([[ 1, 4, 7], 
       [10, 13, 16]])

D.

array([[0, 1, 2], 
       [3, 4, 5], 
       [6, 7, 8]])



---------------------------------------------------------------------------------------
Q5. Dark dimension

Given a 3D array of shape (2,2,2)

arr = array([[[0, 1], 
             [2, 3]], 
 
            [[4, 5], 
             [6, 7]]])

What will be the output of arr[:, 0:,:1]?


A.

array([[2, 3], 
       [6, 7]])

B.

array([[0, 1], 
       [4, 5]])

C.

array([[[0], 
        [2]], 

       [[4], 
        [6]]])
D.

array([[[0, 1], 
        [2, 3]], 

       [[4, 5], 
        [6, 7]]])

---------------------------------------------------------------------------------------
Q6. Pseudo random

Problem Statement:

Given the shape of an array and a range,

Return an array of specified shape, consisting of random integers from "discrete uniform" distribution,in given range [low, high].

Note: high is inclusive in range.

Input Format:

Input has two lines.
First line contains the shape of the array.
Second line contains the the range (low, high).
Output Format:

A numpy array
Sample Input:

(2, 3)
(4, 9)
Sample Output:

[[7, 7, 8], 
 [4, 9, 9]]

---------------------------------------------------------------------------------------
Q7. Random

Which of the following function is used to generate random samples from continuous uniform distribution?

Choose the correct answer from below:
np.random.randint()
np.random.rand()
np.random.normal()
Any of these

---------------------------------------------------------------------------------------